<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hauller Chat</title>
  <script src="/socket.io/socket.io.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@600&family=Open+Sans&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

  <style>
    :root {
      --porter-blue: #0052CC;
      --light-grey: #F5F7FA;
      --charcoal: #2E2E2E;
    }

    * { margin: 0; padding: 0; box-sizing: border-box; }

    html, body {
      height: 100%;
      font-family: 'Open Sans', sans-serif;
      background: var(--light-grey);
      display: flex;
      flex-direction: column;
    }

    .main-header {
      background-color: var(--porter-blue);
      width: 100%;
      padding: 1rem 2rem;
      color: white;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .main-header h2 {
      margin: 0;
      font-family: 'Montserrat', sans-serif;
      font-weight: 700;
    }

    .user-actions button {
      border: none;
      background: white;
      color: var(--porter-blue);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .chat-wrapper {
      flex: 1;
      display: flex;
      overflow: hidden;
    }

    .user-list {
      width: 260px;
      background: #fff;
      border-right: 1px solid #ddd;
      overflow-y: auto;
      padding-top: 1rem;
    }

    .user-list h3 {
      font-size: 1rem;
      padding: 0 1rem;
      text-transform: uppercase;
      color: #444;
    }

    .user-list button {
      width: 100%;
      border: none;
      background: #f9f9f9;
      padding: 12px 16px;
      text-align: left;
      display: flex;
      align-items: center;
      gap: 12px;
      transition: background 0.3s;
    }

    .user-list button.active {
      background: var(--porter-blue);
      color: white;
    }

    .chat-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      background: #fff;
      padding: 1rem;
    }

    .chat-title {
      font-size: 1.2rem;
      font-weight: bold;
      margin-bottom: 1rem;
      color: var(--porter-blue);
    }

    #chatWith {
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    #typingIndicator {
      font-size: 0.85rem;
      color: #888;
      margin-bottom: 0.5rem;
      display: none;
    }

    #chatBox {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
      display: flex;
      flex-direction: column;
      gap: 12px;
      background: #f0f2f7;
      border-radius: 10px;
    }

    .bubble {
      max-width: 70%;
      padding: 12px 16px;
      border-radius: 12px;
      font-size: 0.95rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .sender {
      background: var(--porter-blue);
      color: #fff;
      align-self: flex-end;
    }

    .receiver {
      background: #fff;
      color: #333;
      align-self: flex-start;
    }

    .input-container {
      display: flex;
      gap: 10px;
      margin-top: 1rem;
    }

    #msgInput {
      flex: 1;
      padding: 12px;
      border-radius: 20px;
      border: 1px solid #ccc;
    }

    .send-btn {
      background: var(--porter-blue);
      color: white;
      border: none;
      padding: 0 20px;
      border-radius: 20px;
      transition: 0.3s;
    }

    .send-btn:hover {
      background: #003da9;
    }

    footer {
      background: white;
      padding: 10px;
      text-align: center;
      font-size: 0.9rem;
      color: #666;
      border-top: 1px solid #eaeaea;
    }

    @media (max-width: 768px) {
      .user-list { display: none; }
      .chat-wrapper { flex-direction: column; }
    }
  </style>
</head>

<body>
  <!-- Header -->
  <div class="main-header">
    <h2>Hauller</h2>
    <div class="user-actions d-flex gap-2">
      <button onclick="window.location.href='/member/chat'"><i class="fas fa-comments"></i></button>
      <button onclick="window.location.href='/notification'"><i class="fas fa-bell"></i></button>
      <div class="d-flex align-items-center gap-2">
          <img src="<%= currentUser.image || '/media/image.png' %>" 
               onerror="this.onerror=null; this.src='/media/default-user.png';"
               alt="User" 
               class="rounded-circle"
               style="width: 36px; height: 36px; object-fit: cover; border: 2px solid #e2e5ea;">
          <span class="text-white fw-semibold"><%= currentUser.name %></span>
        </div>
    </div>
  </div>

  <!-- Main Chat Layout -->
  <div class="chat-wrapper">
    <!-- User List -->
    <div class="user-list" id="userList">
      <h3>Users</h3>
      <% otherUsers.forEach((user, index) => { %>
        <button 
          class="<%= index === 0 ? 'active' : '' %>" 
          data-id="<%= user._id.toString() %>" 
          data-name="<%= user.name %>" 
          onclick="switchChat(this)">
          <img src="<%= user.image || '/media/image.png' %>" onerror="this.onerror=null; this.src='/media/default-user.png';" alt="User" class="rounded-circle" style="width: 36px; height: 36px; object-fit: cover;">
          <%= user.name %>
        </button>
      <% }) %>
    </div>

    <!-- Chat Container -->
    <div class="chat-container">
      <div id="chatWith">
        <%= otherUsers.length > 0 ? 'Chatting with ' + otherUsers[0].name : 'No one to chat with' %>
        <div id="typingIndicator"></div>
      </div>
      <div id="chatBox"></div>
      <div class="input-container">
        <input id="msgInput" type="text" placeholder="Type a message..." />
        <button class="send-btn" onclick="sendMessage()">Send</button>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <footer>
    &copy; <%= new Date().getFullYear() %> Hauller Chat. Built by Team 40 | SIT725
  </footer>

  <!-- JS -->
  <script>
    const socket = io();
    const currentUserId = "<%= currentUser._id.toString() %>";
    const currentUserName = "<%= currentUser.name %>";
    const messages = {};
    let currentChatUserId = document.querySelector('.user-list button.active')?.dataset.id || null;
    let currentChatname = document.querySelector('.user-list button.active')?.dataset.name || null;

    if(currentChatUserId) {
      socket.emit('joinRoom', { senderId: currentUserId, receiverId: currentChatUserId });
    }

    function switchChat(button) {
      document.querySelectorAll('.user-list button').forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');
      currentChatUserId = button.dataset.id;
      currentChatname = button.dataset.name;
      document.getElementById('chatWith').innerHTML = 'Chatting with ' + currentChatname + '<div id="typingIndicator"></div>';
      document.getElementById('chatBox').innerHTML = '';
      socket.emit('joinRoom', { senderId: currentUserId, receiverId: currentChatUserId });
      if (messages[currentChatUserId]) {
        messages[currentChatUserId].forEach(msg => appendMessage(msg.senderId, msg.message));
      }
    }

    function appendMessage(senderId, message) {
      const chatBox = document.getElementById('chatBox');
      const bubble = document.createElement('div');
      bubble.classList.add('bubble', senderId === currentUserId ? 'sender' : 'receiver');
      bubble.innerText = message;
      chatBox.appendChild(bubble);
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    function sendMessage() {
      const input = document.getElementById('msgInput');
      const message = input.value.trim();
      if (!message || !currentChatUserId) return;
      socket.emit('privateMessage', { senderId: currentUserId, receiverId: currentChatUserId, message ,senderName:currentUserName});
      if (!messages[currentChatUserId]) messages[currentChatUserId] = [];
      messages[currentChatUserId].push({ senderId: currentUserId, message });
      appendMessage(currentUserId, message);
      input.value = '';
      socket.emit('stopTyping', { senderId: currentUserId, receiverId: currentChatUserId });
    }

    const typingIndicator = document.getElementById('typingIndicator');
    let typingTimeout;
    const msgInput = document.getElementById('msgInput');

    msgInput.addEventListener('input', () => {
      if (!currentChatUserId) return;
      socket.emit('typing', { senderId: currentUserId, receiverId: currentChatUserId, senderName: currentUserName });
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        socket.emit('stopTyping', { senderId: currentUserId, receiverId: currentChatUserId });
      }, 1000);
    });

    document.getElementById('msgInput').addEventListener('keydown', function (e) {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault(); // Prevents line break
    sendMessage();      // Calls the send function
  }
});

    socket.on('newMessage', ({ senderId, message }) => {
      if (!messages[senderId]) messages[senderId] = [];
      messages[senderId].push({ senderId, message });
      if (senderId === currentChatUserId) appendMessage(senderId, message);
    });

    socket.on('displayTyping', ({ senderId, senderName }) => {
      if (senderId === currentChatUserId) {
        const indicator = document.getElementById('typingIndicator');
        indicator.style.display = 'block';
        indicator.textContent = `${senderName} is typing...`;
      }
    });

    socket.on('hideTyping', ({ senderId }) => {
      if (senderId === currentChatUserId) {
        const indicator = document.getElementById('typingIndicator');
        indicator.style.display = 'none';
        indicator.textContent = '';
      }
    });
  </script>
</body>
</html>
